https://www.programcreek.com/java-api-examples/?class=org.apache.logging.log4j.core.LoggerContext&method=reconfigure&__cf_chl_captcha_tk__=3e489b2d71771cf95ea3a90aec2928dd5b3e96ff-1589810495-0-ARaAe9wA4ZPIIGxkxKa8urheGsUdZkiSbPSRzpKhlKPFEdwaID7Th4fmZg4e4uGcN1L5w-VyckQqgtcESSEoOARgrkk4efnQ4XVX8aMIapgSOxf3T9SoDIUpEDwfXZDFsBve50XxgPUtsIxc1TKBNfJNQ7CypuBQbVwlcftnzwoEPzhrU1WuY6CEnkJn__CzNHUkpF-C_IGN_lfpj_RoCX8RyT_hQW_yaukpSod5cGE3GHfd_XG6F3jrzceojrTTICU9P26X92_kkSc2ffGuRu5hPmjaDG3VbnHC-GHJJFoheobNnElvheLTdTdoktJSmTuUk_GwyF7Idueu2JC8biA8XQgnRVJW5BSsvV90ID0SHlpah8LnJJBasYK3adprFzn6syb4herFy2qFsjV4EfRIFNCMoRooRy8900cWWgLQL_MxUuloKKslPS0Ys0uBAUWbkhnKBHpJ5GiQ0TYL-DE1wodrZNk3xmNR37hxzrKfjN7dtL666fa3Dhjnz76jm_J0UVsXMHc7AB5s-vh53YCaBmaRlaBC0YzaVt_3biwoXPHx3W9YGxwOvSRQZ_UeMqlDy9dsvBGUOH9IMqQJ0YkIRfERQU_qs5nQtKMc5wHr
https://coderanch.com/t/677276/open-source/reload-programmed-log-configuration


FAQsSearchRecent TopicsFlagged TopicsHot TopicsBest TopicsRegister / Login
Logo	
granny	aspose total for java	thread boost	advertise on coderanch	polymorphism	
Post ReplyBookmark TopicWatch Topic
New Topic
programming forums
Java
Mobile
Certification
Databases
Caching
Books
Engineering
Micro Controllers
OS
Languages
Paradigms
IDEs
Build Tools
Frameworks
Application Servers
Open Source
This Site
Careers
Other
all forums
aspose total for java
thread boost
meaningless drivel
book review grid
advertise on coderanch
this forum made possible by our volunteer staff, including ...
Marshals:
Campbell Ritchie
Tim Cooke
Paul Clapham
Devaka Cooray
Bear Bibeault
Sheriffs:
Junilu Lacar
Knute Snortum
Liutauras Vilda
Saloon Keepers:
Ron McLeod
Stephan van Hulst
Tim Moores
Tim Holloway
Piet Souris
Bartenders:
salvin francis
Carey Brown
Frits Walraven
Forum: Other Open Source Projects
How to reload a programmed log4j2 configuration
Christian Klugesherz
Ranch Hand
Posts: 111
3 
posted 3 years agoMark post as helpful send pies Quote Report post to moderator

Hello

There is now some days that I'm spending on java logger: log4j2
I have read several times the doc.
The approach is relatively easy if you decide to work on the basis with an .xml file.
But in case you want to create the configuration and adapt through java, it is a bit more complicated.

Below the code I could manage for now.
I didn't succeed to reconfigure the log level
Each time  depth is stopping on error level

2017-03-15 23:24:27,248 [main] ERROR: This is Logger for 1 Error
2017-03-15 23:24:27,256 [main] ERROR: This is Logger 1 Error

Can you please help to specify how to reload the programmed log4j2 configuration  ?

?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
package log4j;
 
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.appender.ConsoleAppender;
import org.apache.logging.log4j.core.config.Configurator;
import org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder;
import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;
import org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder;
import org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration;
 
public class Log4j2Init {
 
    // -------------------------------------------------------
    //                      CONSTRUCTOR
    // -------------------------------------------------------
    public Log4j2Init() {
 
    }
 
    // -------------------------------------------------------
    //                          TEST
    // -------------------------------------------------------
 
    public static void main(String[] args) {
 
        Logger logger;
         
        Log4j2Init log4j2Init = new Log4j2Init();
        log4j2Init.addAppenderLogger("./pac-tool.log",Level.ERROR);
        logger = LogManager.getLogger(Log4j2Init.class.getName());
         
        logger.info("This is Logger for 1 Info");
        logger.error("This is Logger for 1 Error");
        logger.debug("This is Logger for 1 Debug");
        logger.trace("This is Logger for 1 Trace");
 
        // Reconfiguration of log depth
        log4j2Init.addAppenderLogger("./pac-tool.log",Level.TRACE);
        logger = LogManager.getLogger(Log4j2Init.class.getName());
 
        logger.info("This is Logger 1 Info");
        logger.error("This is Logger 1 Error");
        logger.debug("This is Logger 1 Debug");
        logger.trace("This is Logger 1 Trace");
         
    }
 
 
    // -------------------------------------------------------
    //                          METHOD
    // -------------------------------------------------------
 
    public void addAppenderLogger(String filename, Level vlevel )
    {
        ConfigurationBuilder< BuiltConfiguration > builder;
        LayoutComponentBuilder layoutBuilder;
        AppenderComponentBuilder appenderBuilder;
 
        // Create log4j2  Builder
        builder = ConfigurationBuilderFactory.newConfigurationBuilder();
        builder.setStatusLevel( Level.INFO);
        builder.setConfigurationName("BuilderTest");
 
        // ------------------------------------------
        // CONSOLE
        // ------------------------------------------
        // PatternLayout
        layoutBuilder = builder.newLayout("PatternLayout")
                .addAttribute("pattern", "%d [%t] %-5level: %msg%n%throwable");
 
        // Create Console Appender : Type = "CONSOLE"
        appenderBuilder = 
                builder.newAppender("Stdout", "CONSOLE")
                .addAttribute("target", ConsoleAppender.Target.SYSTEM_OUT)
                .add(layoutBuilder);
 
        builder.add( appenderBuilder );
 
        // ------------------------------------------
        // FILE
        // ------------------------------------------
        // PatternLayout
        layoutBuilder = builder.newLayout("PatternLayout")
                .addAttribute("pattern", "%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n");
 
        // Create File Appender : Type = "FILE"
        appenderBuilder = builder.newAppender("logfile", "FILE")
                .addAttribute("fileName", filename)
                .addAttribute("append", "false")
                .addAttribute("immediateFlush", "false")
                .add(layoutBuilder);
 
        builder.add(appenderBuilder);
 
 
        // create the new logger
        builder.add( builder.newRootLogger( vlevel )
                .add( builder.newAppenderRef( "Stdout" ) )
                .add( builder.newAppenderRef( "logfile" ) )
                );
 
        Configurator.initialize(builder.build());
 
 
    }
 
}


Many thanks

Christian

Christian Klugesherz
Ranch Hand
Posts: 111
3 
posted 3 years ago Mark post as helpful send pies Quote Report post to moderator
Finally I got it

?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
package log4j;
 
import java.nio.file.Paths;
 
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.Appender;
import org.apache.logging.log4j.core.LoggerContext;
import org.apache.logging.log4j.core.config.Configuration;
import org.apache.logging.log4j.core.config.LoggerConfig;
 
 
public class Log4j2Init {
 
    private String logPath;
 
    // -------------------------------------------------------
    //                      CONSTRUCTOR
    // -------------------------------------------------------
    /**
     * Initialize Log4j2
     * Configure log path which will be used in "log4j2.xml"
     *  Common error is caused by the static logger
     *  If you logs before the System.setProperty, this will cause the variable UNDEFINED error.
     *  private static final Logger logger = LogManager.getLogger(test.class.getName());
     *  is forbidden here !!
     */
    public Log4j2Init() {
        logPath = Paths.get(getUserAppDirectory()+"/Pac-Tool").toString();
        System.setProperty("logpath.name",logPath);
    }
 
    // -------------------------------------------------------
    //                          TEST
    // -------------------------------------------------------
 
    public static void main(String[] args) {
 
        Log4j2Init log4j2Init = new Log4j2Init();
        System.out.println("Pat of the Log File : " + log4j2Init.getLogPath());
         
        // Create the Logger
        Logger logger = LogManager.getLogger(Log4j2Init.class.getName());
 
        @SuppressWarnings("resource")
        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
        Configuration config = ctx.getConfiguration();
        LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME); 
 
        // Read the Appenders
        System.out.println("Appenders declared in .xml :" + loggerConfig.getAppenderRefs());
        System.out.println("Appenders used in Logger :" + loggerConfig.getAppenders());
 
        // Apply the level specified in log4j2.xml
        System.out.println("Log Level (default in .xml)= " + loggerConfig.getLevel());
        logger.error("This is Logger for 1 Error");
        logger.info("This is Logger for 1 Info");
        logger.debug("This is Logger for 1 Debug");
        logger.trace("This is Logger for 1 Trace");
 
        // Remove Console Logger + Set new log level 
        loggerConfig.removeAppender("Console");
        loggerConfig.setLevel(Level.TRACE);
        ctx.updateLoggers();  
 
        System.out.println("Log Level = " + loggerConfig.getLevel());
        System.out.println("Appenders used in Logger :" + loggerConfig.getAppenders());
 
        logger.error("This is Logger 2 Error");
        logger.info("This is Logger 2 Info");
        logger.debug("This is Logger 2 Debug");
        logger.trace("This is Logger 2 Trace");
 
        // Add Appender
        Appender appender = config.getAppender("Console");
        loggerConfig.addAppender(appender, Level.TRACE, null );
        ctx.updateLoggers();  
 
        System.out.println("Log Level = " + loggerConfig.getLevel());
        System.out.println("Appenders used in Logger :" + loggerConfig.getAppenders());
 
        logger.error("This is Logger 3 Error");
        logger.info("This is Logger 3 Info");
        logger.debug("This is Logger 3 Debug");
        logger.trace("This is Logger 3 Trace");
 
    }
 
 
 
    /**
     * getUserAppDirectory
     * @return
     */
    private String getUserAppDirectory() {
        String workingDirectory;
        String OS = (System.getProperty("os.name")).toUpperCase();  
        if (OS.contains("WIN"))
        {
            //it is simply the location of the "AppData" folder
            workingDirectory = System.getenv("AppData");
        }
        else
        {
            //Otherwise, we assume Linux or Mac
            workingDirectory = System.getProperty("user.home");
            //if we are on a Mac, we are not done, we look for "Application Support"
            workingDirectory += "/Library/Application Support";
        }
        return workingDirectory;
    }
 
    public String getLogPath() {
        return logPath;
    }
 
 
}



with

?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
<?xml version="1.0" encoding="UTF-8"?>
<!-- status will define the configuration level of log4j2 configuration file  -->
<Configuration status="error" name="XMLPACTOOL">
    <Appenders>
 
        <!-- Generate Log in console -->
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %logger{36} - %msg%n" />
        </Console>
 
        <!-- Generate Log in file -->
        <File name="LogFile" fileName="${sys:logpath.name}/Pac-Tool.log"
            immediateFlush="false" append="false">
            <PatternLayout
                pattern="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
        </File>
 
 
    </Appenders>
 
    <Loggers>
        <Root level="info">
            <AppenderRef ref="Console" />
            <AppenderRef ref="LogFile" />
        </Root>
    </Loggers>
 
</Configuration>
Paul Clapham
Marshal 
Posts: 25385
65 
I like...
Eclipse IDE Firefox Browser MySQL Database
posted 3 years agoMark post as helpful send pies Quote Report post to moderator
Thanks for posting back with the solution, Christian!
Java 8 (verified skill)
Skill verified by Paul Clapham
Christian Klugesherz
Ranch Hand
Posts: 111
3 
posted 3 years agoMark post as helpful send pies Quote Report post to moderator
You're Welcome
Christian Klugesherz
Ranch Hand
Posts: 111
3 
posted 3 years agoMark post as helpful send pies Quote Report post to moderator
Finally I improved.
Basis, is to declare only console in .xml configuration, then to add File appender through programming
This is really useful because the declaration the logger can be kept as "private static final"
?
1
private static final Logger logger = LogManager.getLogger(PacTool.class.getName());

AND also to adapt the destination of the log file
Here ago the codes

?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
<?xml version="1.0" encoding="UTF-8"?>
<!-- status will define the configuration level of log4j2 configuration file  -->
<Configuration status="error" name="XMLPACTOOL">
    <Appenders>
 
        <!-- Create Log "Console" -->
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %logger{36} - %msg%n" />
        </Console>
 
        <!-- Create Log File
        Log File will be created and added by to the logger by program !!  -->
 
    </Appenders>
 
 
    <Loggers>
        <Root level="info">
            <AppenderRef ref="Console" />
        </Root>
    </Loggers>
 
</Configuration>



?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
import java.io.Serializable;
import java.nio.file.Paths;
import java.util.Map;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.Appender;
import org.apache.logging.log4j.core.Layout;
import org.apache.logging.log4j.core.LoggerContext;
import org.apache.logging.log4j.core.appender.FileAppender;
import org.apache.logging.log4j.core.config.Configuration;
import org.apache.logging.log4j.core.config.LoggerConfig;
import org.apache.logging.log4j.core.layout.PatternLayout;
 
 
public class Log4j2Config {
 
    private static final Logger logger = LogManager.getLogger(Log4j2Config.class.getName());
    private String logPath;
 
    // -------------------------------------------------------
    //                      CONSTRUCTOR
    // -------------------------------------------------------
    /**
     * Initialize Log4j2
     * Configure log path which will be used in "log4j2.xml"
     *     Common error is caused by the static logger
     *     If you logs before the System.setProperty, this will cause the variable UNDEFINED error.
     *     private static final Logger logger = LogManager.getLogger(test.class.getName());
     *     is forbidden here !!
     */
    public Log4j2Config() {
        logPath = Paths.get(getUserAppDirectory()+"/Pac-Tool").toString();
        //System.setProperty("logpath.name",logPath);
 
        @SuppressWarnings("resource")
        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
        Configuration config= ctx.getConfiguration();
 
        // --- create the PatternLayout
        //<PatternLayout
        //pattern="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
        Layout<? extends Serializable> layout = PatternLayout.newBuilder()
                .withPattern("%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n")
                .build();
 
        // --- create the Appender
        //<File name="LogFile" fileName="./Pac-Tool.log"
        //      immediateFlush="false" append="false">
        //      <PatternLayout
        //          pattern="%d{yyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
        //  </File>
        Appender appender  = FileAppender.newBuilder()
                .withName("LogFile")
                .withFileName(logPath + "/Pac-Tool.log")
                .withAppend(false)
                .withImmediateFlush(false)
                .withLayout(layout)
                .build();
 
        appender.start();
        config.addAppender(appender);
    }
 
    // -------------------------------------------------------
    //                          TEST
    // -------------------------------------------------------
 
    public static void main(String[] args) {
 
        // Initialize the Logger
        Log4j2Config log4j2Config = new Log4j2Config();
        System.out.println("--------- Path of the Log File : " + log4j2Config.getLogPath());
        System.out.println("--------- All Declared Appenders " + log4j2Config.getAllDeclaredAppenders().toString());
        System.out.println("Read the Appenders Activate in the Logger");
        System.out.println("-------- Is Logger Console active --> " + log4j2Config.isLoggerConsole());
        System.out.println("-------- Is Logger File active --> " + log4j2Config.isLoggerLogFile());
 
        // Create the Logger
        // The logger must be declared afterwards the initialization
        //      Logger logger = LogManager.getLogger(Log4j2Config.class.getName());
 
        // Apply the level specified in log4j2.xml
        System.out.println("--------- Log Level (default in .xml) = " + log4j2Config.getLevel());
        logger.error("This is Logger for 1 Error");
        logger.info("This is Logger for 1 Info");
        logger.debug("This is Logger for 1 Debug");
        logger.trace("This is Logger for 1 Trace");
 
 
        // Read the Appenders Activate in the Logger
        System.out.println("Read the Appenders Activate in the Logger");
        System.out.println("-------- Is Logger Console active --> " + log4j2Config.isLoggerConsole());
        System.out.println("-------- Is Logger File active --> " + log4j2Config.isLoggerLogFile());
 
 
        System.out.println("Remove Console Logger");
        log4j2Config.activeLoggerConsole(false);
        System.out.println("-------- Is Logger Console active --> " + log4j2Config.isLoggerConsole());
        System.out.println("-------- Is Logger File active --> " + log4j2Config.isLoggerLogFile());
 
        logger.error("This is Logger 2 Error");
        logger.info("This is Logger 2 Info");
        logger.debug("This is Logger 2 Debug");
        logger.trace("This is Logger 2 Trace");
 
        System.out.println("Add Console Logger");
        log4j2Config.activeLoggerConsole(true);
        System.out.println("-------- Is Logger Console active --> " + log4j2Config.isLoggerConsole());
        System.out.println("-------- Is Logger File active --> " + log4j2Config.isLoggerLogFile());
 
        System.out.println("Add File Logger");
        log4j2Config.activeLoggerLogFile(true);
        System.out.println("-------- Is Logger Console active --> " + log4j2Config.isLoggerConsole());
        System.out.println("-------- Is Logger File active --> " + log4j2Config.isLoggerLogFile());
 
        logger.error("This is Logger 3 Error");
        logger.info("This is Logger 3 Info");
        logger.debug("This is Logger 3 Debug");
        logger.trace("This is Logger 3 Trace");
 
        System.out.println("Before to Set Log Level = " + log4j2Config.getLevel());
        log4j2Config.setLevel(Level.TRACE);
        System.out.println("Log Level = " + log4j2Config.getLevel());
 
        logger.error("This is Logger 4 Error");
        logger.info("This is Logger 4 Info");
        logger.debug("This is Logger 4 Debug");
        logger.trace("This is Logger 4 Trace");
 
    }
 
    // -------------------------------------------------------
    //                          METHOD
    // -------------------------------------------------------
 
    // ------------------
    //  DESTINATION FILE
    // ------------------
    /**
     * getUserAppDirectory
     * @return
     */
    private String getUserAppDirectory() {
        String workingDirectory;
        String OS = (System.getProperty("os.name")).toUpperCase();  
        if (OS.contains("WIN")) {
            workingDirectory = System.getenv("AppData");
        }
        else {
            workingDirectory = System.getProperty("user.home");
            //if we are on a MAC, we are not done, we look for "Application Support"
            workingDirectory += "/Library/Application Support";
        }
        return workingDirectory;
    }
 
    /**
     * getLogPath
     * @return
     */
    public String getLogPath() {
        return logPath;
    }
 
    // ------------------
    //  CONSOLE
    // ------------------
    /**
     * isLoggerConsole()
     *      Check if Console Logger is used
     * @return boolean
     */
    @SuppressWarnings("resource")
    public boolean isLoggerConsole() {
        // https://logging.apache.org/log4j/2.0/log4j-core/apidocs/org/apache/logging/log4j/core/config/LoggerConfig.html
        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
        Configuration config= ctx.getConfiguration();
        LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME); 
        //System.out.println("Appenders declared in .xml :" + loggerConfig.getAppenderRefs());
        //System.out.println("Appenders used in Logger :" + loggerConfig.getAppenders());
        Map<String,Appender> ksAppender;
        ksAppender = loggerConfig.getAppenders();
        if (ksAppender.get("Console") != null)
            return true;
        else
            return false;
    }
 
    /**
     * activeLoggerConsole()
     *      Remove or Add Console Logger
     */
    public void activeLoggerConsole(boolean state) {
        // https://logging.apache.org/log4j/2.0/log4j-core/apidocs/org/apache/logging/log4j/core/config/LoggerConfig.html
        @SuppressWarnings("resource")
        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
        Configuration config= ctx.getConfiguration();
        LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME); 
        if (state == false) {
            System.out.println("Remove Console Logger");
            loggerConfig.removeAppender("Console");
        } else {
            System.out.println("Add Console Logger");
            Appender appender = config.getAppender("Console");
            loggerConfig.addAppender(appender, null, null );
        }
        ctx.updateLoggers();  
        //System.out.println("Appenders used in Logger :" + loggerConfig.getAppenders());
    }
 
 
    // ------------------
    //  LOGFILE
    // ------------------
    /**
     * isLoggerLogFile()
     *      Check if LogFile Logger is used
     * @return boolean
     */
    @SuppressWarnings("resource")
    public boolean isLoggerLogFile() {
        // https://logging.apache.org/log4j/2.0/log4j-core/apidocs/org/apache/logging/log4j/core/config/LoggerConfig.html
        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
        Configuration config= ctx.getConfiguration();
        LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME); 
        //System.out.println("Appenders declared in .xml :" + loggerConfig.getAppenderRefs());
        //System.out.println("Appenders used in Logger :" + loggerConfig.getAppenders());
        Map<String,Appender> ksAppender;
        ksAppender = loggerConfig.getAppenders();
        if (ksAppender.get("LogFile") != null)
            return true;
        else
            return false;
    }
 
    /**
     * activeLoggerLogFile()
     *      Remove or Add LogFile Logger
     */
    public void activeLoggerLogFile(boolean state) {
        // https://logging.apache.org/log4j/2.0/log4j-core/apidocs/org/apache/logging/log4j/core/config/LoggerConfig.html
        @SuppressWarnings("resource")
        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
        Configuration config= ctx.getConfiguration();
        LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME);
        if (state == false) {
            System.out.println("Remove LogFile Logger");
            loggerConfig.removeAppender("LogFile");
        } else {
            System.out.println("Add LogFile Logger");
            Appender appender = config.getAppender("LogFile");
            loggerConfig.addAppender(appender, null, null );
        }
        ctx.updateLoggers();  
        //System.out.println("Appenders used in Logger :" + loggerConfig.getAppenders());
    }
 
    @SuppressWarnings("resource")
    public Map<String, Appender> getAllDeclaredAppenders() {
        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
        Configuration config= ctx.getConfiguration();
        return( config.getAppenders() );
    }
 
    // ------------------
    //  LOGFILE
    // ------------------
 
    /**
     * getLevel
     * @return
     */
    @SuppressWarnings("resource")
    public Level getLevel () {
        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
        Configuration config= ctx.getConfiguration();
        LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME); 
        return loggerConfig.getLevel();
    }
 
 
    /**
     * Set Level
     * @param vlevel
     */
    public void setLevel( Level vlevel) {
        @SuppressWarnings("resource")
        LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
        Configuration config= ctx.getConfiguration();
        LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME); 
        loggerConfig.setLevel(vlevel);
        System.out.println("Log Level = " + loggerConfig.getLevel());
        ctx.updateLoggers();  
    }
}


RESULT

--------- Path of the Log File : D:\Users\kluges1\AppData\Roaming\Pac-Tool
--------- All Declared Appenders {Console=Console, LogFile=LogFile}
Read the Appenders Activate in the Logger
-------- Is Logger Console active --> true
-------- Is Logger File active --> false
--------- Log Level (default in .xml) = INFO
22:18:41.865 ERROR log4j.Log4j2Config - This is Logger for 1 Error
22:18:41.867 INFO  log4j.Log4j2Config - This is Logger for 1 Info
Read the Appenders Activate in the Logger
-------- Is Logger Console active --> true
-------- Is Logger File active --> false
Remove Console Logger
Remove Console Logger
-------- Is Logger Console active --> false
-------- Is Logger File active --> false
Add Console Logger
Add Console Logger
-------- Is Logger Console active --> true
-------- Is Logger File active --> false
Add File Logger
Add LogFile Logger
-------- Is Logger Console active --> true
-------- Is Logger File active --> true
22:18:41.868 ERROR log4j.Log4j2Config - This is Logger 3 Error
22:18:41.868 INFO  log4j.Log4j2Config - This is Logger 3 Info
Before to Set Log Level = INFO
Log Level = TRACE
Log Level = TRACE
22:18:41.869 ERROR log4j.Log4j2Config - This is Logger 4 Error
22:18:41.869 INFO  log4j.Log4j2Config - This is Logger 4 Info
22:18:41.869 DEBUG log4j.Log4j2Config - This is Logger 4 Debug
22:18:41.869 TRACE log4j.Log4j2Config - This is Logger 4 Trace


Christian Klugesherz
Ranch Hand
Posts: 111
3 
posted 3 years agoMark post as helpful send pies Quote Report post to moderator
Sure that:
?
1
2
3
4
5
6
7
8
/**
 * Initialize Log4j2
 * Configure log path which will be used in "log4j2.xml"
 *     Common error is caused by the static logger
 *     If you logs before the System.setProperty, this will cause the variable UNDEFINED error.
 *     private static final Logger logger = LogManager.getLogger(test.class.getName());
 *     is forbidden here !!
 */

Has no more sense here :-)
  	
The knights of nee want a shrubbery. And a tiny ad:
Java file APIs (DOC, XLS, PDF, and many more)
https://products.aspose.com/total/java
reply
Bookmark TopicWatch Topic
New Topic
Boost this thread!
Similar Threads

Log4j2 Logger's level
Question on Altering / Creating Log4j2 Configuration in code
Programmatically Configuring log4j2 problem
using regex in log4j2 config file
Anything wrong with the way I use log4j2 that I can't get the debug output of my javamail?
More...
jQuery in Action, 3rd edition
current ranch time (not your local time) is May 18, 2020 08:18:12
contact us | advertise |  | Powered by JForum | copyright © 1998-2020 paul wheaton, missoula, MT